.\" Copyright Petr Hracek, 2016
.\"
.\" This page is distributed under GPL.
.\"
.TH preupgrade-assistant-api 1 2016-05-30 "" "Linux User's Manual"
.SH NAME
preupgrade-assistant-api \- Preupgrade assistant API provides a set of functions
and variables which can be used for modules writing.

.SH AVAILABLE FUNCTIONS
API provides a set of functions which can be used for better handling of your data.

\fBcheck_applies_to\fP - Function can be used for specific RPM package detection. \fBapplies_to\fP can be defined in module in order to proper functionality
in case module needs a specific package.
 If the RPM package does not exists then check script exits with \fBexit_not_applicable\fP return code.

\fBcheck_root\fP - Function checks whether user is root. Nowadays not supported from Python API.

\fBsolution_file\fP - Function adds a message to solution file defined in INI file.

\fBconfig_file_changed\fP - Function returns True if config file was changed. In opposite case False. Nowadays not supported from BASH

\fBbackup_config_file\fP - Function backups a config file to /root/preupgrade directory. Like /etc/httpd.conf will be backuped
as /root/preupgrade/etc/httpd.conf

\fBservice_is_enabled\fP - Function checks if service is enabled. Service status is taken by command chkconfig.

\fBget_dist_native_list\fP - Function returns a list of all native packages. Native packages are gathered by command \fBrpm -qa\fP.

\fBis_dist_native\fP - Function returns True if package is installed and signed by Red Hat. False in opposite case.

\fBprint_home_dirs\fP - Function prints even directories mentioned in /etc/preupgrade-assistant.conf file if user_config_file is disabled
or specific directories which are mentioned in file home_directory_file in /etc/preupgrade-assistant.conf

\fBadd_pkg_to_kickstart\fP - Function adds package or list of packages to file /root/preupgrade/kickstart/special_pkg_list

\fBis_pkg_installed\fP - Function checks if package is installed on system.

\fBcheck_rpm_to\fP - Function checks if relevant package is installed and if relevant binary exists on the system. This is needed from module point of view.

\fBconf_get_sections\fP - Function gets all sections from config file defined as parameter \fB$1\fP. Nowadays not supported from Python API.

\fBconf_get_section\fP - Function gets all items from specific section defined as first parameter in config file defined as second parameter. Nowadays not supported from Python API.

.SH COMMON_DATA

There are several log files gathered before an assessment:

\fB$VALUE_RPM_QA\fP - all packages with RSA HEADER and php signature

\fB$VALUE_ALL_CHANGED\fP - all changed package files

\fB$VALUE_CONFIGCHANGED\fP - all changed configuration files

\fB$VALUE_RPM_RHSIGNED\fP - all RPM Packages signed by RedHat

\fB$VALUE_PASSWD\fP - file with all users

\fB$VALUE_GROUP\fP - file with all groups

\fB$VALUE_CHKCONFIG - file with \fBchkconfig\fP output

\fB$VALUE_TPM_PREUPGRADE\fP - directory used for storing your data (like kickstart, postupgrade.d directories)

\fB$VALUE_ALLMYFILES\fP - all local files

\fB$VALUE_EXECUTABLES\fP - all executables files

\fB$MIGRATE\fP - set to 1 if migration mode is specified by module

\fB$UPGRADE\fP - set to 1 if upgrade mode is specified by module


There are several directories located in /root/preupgrade which are used by \fBpreupg\fP command

\fBkickstart\fP - used for kickstart generation.

\fBetc\fP - stored configuration files copied by modules.

\fBpostupgrade.d\fP - stored scripts which are executed after an upgrade.

\fBpreupgrade-scripts\fP - stored scripts which are executed before an upgrade.

\fBnoauto-postupgrade.d\fP - stored scripts which are not executed automatically after an upgrade.

.SH RETURN CODES
\fBexit_pass\fP - The test passed. Use if nothing "broken" was detected

\fBexit_not_applicable\fP - Rule did not apply to test target. (e.g. package is not installed). Useful if pripare requirements are not met.

\fBexit_informational\fP - Rule was evaluated by the checking engine, but isn't to be scored. Ideal for informational results, which have "migration guide" chapter style.

\fBexit_fixed\fP - Rule failed, but was later fixed. Ideal if you automatically fixed some configuration file/incompatibility, no manual review expected, but still we should notify the user.

\fBexit_unknown\fP - Could not tell what happened. Don't know when this should be used ;).

\fBexit_error\fP - An error occurred and test could not complete. (script failed while doing its job). Should be used in "assert way", not as common result.

\fBexit_fail\fP - The test failed. (moving to new release with this configuration will result in malfunction). Use when you expect some action from the user - when the migration solution was not completed automatically.

Your script should also tell the administrator how risky is to upgrade your component. This can be done with api functions log_{none,slight,medium,high,extreme}_risk.

.SH AVAILABLE RETURN CODES IN REPORTS
\fBpass\fP - The same as in RETURN CODES

\fBnot_applicable\fP - Rule did not apply to test target. (e.g. package is not installed). Useful if pripare requirements are not met.

\fBinformational\fP - Rule was evaluated by the checking engine, but isn't to be scored. Ideal for informational results, which have "migration guide" chapter style.

\fBfixed\fP - Rule failed, but was later fixed. Ideal if you automatically fixed some configuration file/incompatibility, no manual review expected, but still we should notify the user.

\fBunknown\fP - Could not tell what happened. Don't know when this should be used ;).

\fBerror\fP - An error occurred and test could not complete. (script failed while doing its job). Should be used in "assert way", not as common result.

\fBneeds_inspection\fP - The test failed with return code exit_fail. But content developer add one of these logs (log_{medium|slight}_risk before exit_fail.

\fBneeds_action\fP - The test failed with return code exit_fail. But content developer add the log_high_risk before exit_fail.

\fBfail\fP - The test failed and inplace upgrade is not recommended and marked as EXTERME risk. We do not recommend it.

.SH RISK ASSESSMENT LEVELS
The available risk assessment levels are log_{slight,medium,high,extreme}_risk:
\fBSlight\fP - We assessed this field and have not found any issues. However, there is still some risk that not all variants have been covered.

\fBMedium\fP - It is likely that the area causes a problem in case of the inplace upgrade. It needs to be checked by the administrator after the inplace upgrade and after the system has been monitored for some time.

\fBHigh\fP - The inplace upgrade can't be used without the administrator's assistance. This typically involves some known broken scenario, existing 3rd party packages. After the administrator manually fixes the issue, it may be possible to perform the inplace upgrade, but it is not recommended.

\fBExtreme\fP - We found an incompatibility which makes the inplace upgrade impossible. It is recommended to install a new system with the help of preupgrade-assistant remediations.

Levels Slight and Medium change return code exit_fail to exit_needs_inspection. Level High change exit_fail to exit_needs_action.

.SH LOGGING

There are several functions which does logging:

\fBlog_{debug,info,warning,error} <component> <message>\fP

The function create logs in format e.g:

<SEVERITIES> <component> <TIMESTAMP> <MESSAGE>

.SH INI FILE EXAMPLE

Ini file example
.nf
\& [preupgrade]
\& content_title: <Some title>
\& content_description: <Some a pretty long description about content>
\& check_script: <check script name>
\& solution_file: <solution file name which advise administration in case of problems>
\& author: <nauthor name with email>
\& applies_to: <package name (RPM) which is test it>
.fi

.SH AUTHORS
Petr Hracek, <phracek@redhat.com> (man page)
